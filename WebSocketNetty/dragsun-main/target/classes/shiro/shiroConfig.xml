<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd    
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd  
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
>


	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="JSESSIONID"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="-1"/>
	</bean>

	<bean id="sessionDAO" class="com.jason.core.shiro.MySessionDAO">
	</bean>


	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!--
		指定本系统SESSIONID, 默认为: JSESSIONID
		问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失!
		解决SWFUpload flash上传组件新开的session的问题
		-->
		<property name="globalSessionTimeout" value="2592000000"/><!-- 30天   2592000000-->
		<!--<property name="sessionIdCookie" ref="sessionIdCookie"/>-->
		<property name="sessionDAO" ref="sessionDAO"/>
		<property name="sessionListeners"><!-- session监听 -->
			<list>
			</list>
		</property>
		<property name="sessionValidationSchedulerEnabled" value="false"/>
	</bean>

	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java
	 -->
	<bean id="userRealm" class="com.jason.core.shiro.UserRealm"/>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm"/>
		<property name="sessionManager" ref="sessionManager"/>
	</bean>



	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/login.do"/>
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
		<!-- -->
		<property name="successUrl" value="/index.do"/>
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<property name="unauthorizedUrl" value="/error/error403.do"/>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filters">
			<util:map>
				<entry key="authc">
					<!--
					加入失败登陆次数锁定账号、图形验证码 -->
					<bean class="com.jason.core.shiro.LoginFormAuthenticationFilter">
					</bean>
				</entry>
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/css/**=anon
				/js/**=anon
				<!-- 静态js css 小图标 -->
				/static/**=anon
				<!-- 公共开放请求 -->
				/common/**=anon
				/error/**=anon
				/test/**=anon
				/WEB-INF/jsp/error/**=anon
				/logout = logout
				<!-- authc不能少,否则导致无法登录;	SslFilter登录强制https	/login.do=authc,ssl[8443] -->
				/login.do=authc
				<!-- /login.do**=anon登录成功之后,在浏览器里强制切换为非https模式 -->
				/**=authc
			</value>
		</property>
	</bean>


</beans>
	